library(tidyverse)
library(popbio)
## matrix multiplication Basics
myMat <- matrix(c(0,2,0.5,0.01), nrow = 2, byrow = TRUE)
myMat
# multiply once
myMat %*% n0
# vector of starting population sizes
n0<-c(10,10)
# multiply once
myMat %*% n0
?matrix
# LOOP to multiply
# collection zone to collect J and A numbers
pops <- matrix('numeric', nrow = 20, ncol = 2)
pops
pops[1,] <- n0
pops[1,]
for (i in 2:20){
pops[i,]<-myMat %*% pops[(i-1),]
}
pops[(2,]
pops[(2),]
pops[(1),]
i = 2
pops[(i-1),]
myMat
myMat %*% pops[(i-1),]
pops <- matrix('NA', nrow = 20, ncol = 2)
pops[1,] <- n0
for (i in 2:20){
pops[i,]<-myMat %*% pops[(i-1),]
}
pops[(i-1),] %*% myMat
myMat %*% t(pops[(i-1),])
pops
# LOOP to multiply
# collection zone to collect J and A numbers
pops <- matrix('numeric', nrow = 20, ncol = 2)
pops[1,] <- n0
pops
# LOOP to multiply
# collection zone to collect J and A numbers
pops <- matrix(data = 'numeric', nrow = 20, ncol = 2)
pops
pops[1,] <- n0
pops
# LOOP to multiply
# collection zone to collect J and A numbers
pops <- matrix(data = NA, nrow = 20, ncol = 2)
pops[1,] <- n0
pops
myMat %*% pops[(i-1),]
for (i in 2:20){
pops[i,]<-myMat %*% pops[(i-1),]
}
pops
# LOOP to multiply
# collection zone to collect J and A numbers
pops <- data.frame(data = NA, nrow = 20, ncol = 2)
pops[1,] <- n0
data.frame(data = NA, nrow = 20, ncol = 2)
# LOOP to multiply
# collection zone to collect J and A numbers
pops <- matrix(data = NA, nrow = 20, ncol = 2)
pops[1,] <- n0
times <- 50
pops <- matrix(data = NA, nrow = times, ncol = 2)
times <- 50
pops <- matrix(data = NA, nrow = times, ncol = 2)
pops[1,] <- n0
for (i in 2:times){
pops[i,]<-myMat %*% pops[(i-1),]
}
matplot(pops)
matplot(pops, type = 'l')
times <- 50
pops <- matrix(data = NA, nrow = times, ncol = 2)
pops[1,] <- n0
for (i in 2:times){
pops[i,]<-myMat %*% t(pops[(i-1),])
}
myMat <- matrix(c(0,2,0.5,0.1), nrow = 2, byrow = TRUE)
myMat
# vector of starting population sizes
n0<-c(10,10)
# multiply once
myMat %*% n0
times <- 50
pops <- matrix(data = NA, nrow = times, ncol = 2)
pops[1,] <- n0
for (i in 2:times){
pops[i,]<-myMat %*% pops[(i-1),]
}
matplot(pops, type = 'l')
pops
plotPops <- as.data.frame(pops)
names(plotPops) <- c("J", "A")
plotPops <- as.data.frame(pops)
names(plotPops) <- c("J", "A")
plotPops <- mutate(plotPops, totalN = J+A)
plotPops
plotPops <- as.data.frame(pops)
names(plotPops) <- c("J", "A")
plotPops <- mutate(plotPops, totalN = J+A, time = 1:times)
plotPops
ggplot(plotPops, aes(x = time , y = J))+
geom_line()
ggplot(plotPops, aes(x = time , y = J))+
geom_line()+
geom_line(aes(x = time, y = A, colour = 'red'))+
geom_line(aes(x = time, y = totalN, colour = "green"))
ggplot(plotPops, aes(x = time , y = J))+
geom_line()+
geom_line(aes(x = time, y = A), colour = 'red'))+
geom_line(aes(x = time, y = totalN), colour = "green"))
ggplot(plotPops, aes(x = time , y = J))+
geom_line()+
geom_line(aes(x = time, y = A), colour = 'red')+
geom_line(aes(x = time, y = totalN), colour = "green")
ggplot(plotPops, aes(x = time , y = J))+
geom_line()+
geom_line(aes(x = time, y = A), colour = 'red')+
geom_line(aes(x = time, y = totalN), colour = "green")+
scale_y_log10()
# roughly calcuate stable age
mutate(plotPops, propJ = J/totalN, propA = A/totalN)
# roughly calcuate stable age
mutate(plotPops, propJ = J/totalN, propA = A/totalN) %>% tail
## eigen magic
eigen(myMat)
with(plotPops, J/A)
with(plotPops, A/J)
## eigen magic
eigen(myMat)
# roughly calcuate stable age
mutate(plotPops, propJ = J/totalN, propA = A/totalN) %>% tail
## eigen magic
eigen(myMat)
?popbio
# popbio magic
lambda(myMat)
stable.stage(myMat)
stable.stage
?Re
eigen(myMat)$vectors
eigen(myMat)$vectors[,1]
eigen(myMat)$vectors[,1]/sum(eigen(myMat)$vectors[,1])
?pop.projection
pop.projection(myMat, n, 50)
myMat
n <- c(10,10)
pop.projection(myMat, n, 50)
stage.vector.plot(out)
out <- pop.projection(myMat, n, 50)
stage.vector.plot(out)
stage.vector.plot(out$stage.vectors)
plot(out)
out
names(out)
matplot(t(out$stage.vectors))
matplot(t(out$stage.vectors), type = 'l')
out$pop.sizes
myMat <- matrix(c(0,2,0.5,0.1), nrow = 2, byrow = TRUE)
myMat
Reduce(f=function(v, x) myMat %*% v, x=1:100, init=c(10,10), accumulate=TRUE)
Reduce(f=function(v, x) myMat %*% v, x=1:50,
init=c(10,10), accumulate=TRUE)
n0<-c(10,10)
# multiply once
myMat %*% n0
# LOOP to multiply
# collection zone to collect J and A numbers
times <- 50
pops <- matrix(data = NA, nrow = times, ncol = 2)
pops[1,] <- n0
for (i in 2:times){
pops[i,]<-myMat %*% pops[(i-1),]
}
pops
Reduce(f=function(v, x) myMat %*% v, x=1:50,
init=c(10,10), accumulate=TRUE)
?Reduce
?purrr:reduce
?purrr::reduce
purrr::reduce(f=function(v, x) myMat %*% v, x=1:50,
init=c(10,10))
purrr::reduce(.f=function(v, x) myMat %*% v, .x=1:50,
.init=c(10,10))
purrr::reduce(.f=function(v, x) myMat %*% v, .x=1:50,
.init=c(10,10), accumulate = TRUE)
purrr::reduce(.f=function(v, x) myMat %*% v, .x=1:50,
.init=c(10,10), print)
purrr::reduce(.f=function(v, x) print(myMat %*% v), .x=1:50,
.init=c(10,10))
as.data.frame(purrr::reduce(.f=function(v, x) print(myMat %*% v), .x=1:50,
.init=c(10,10)))
# Functional Programming style
Reduce(f=function(v, x) myMat %*% v, x=1:50,
init=c(10,10), accumulate=TRUE)
purrr::reduce(.f=function(v, x) print(myMat %*% v), .x=1:50,
.init=c(10,10))
purrr::reduce(.f=function(v, x) left_join(myMat %*% v), .x=1:50,
.init=c(10,10))
# libraries we need
# install these first (only once!!) -> over there in packages tab.
library(tidyverse)
reduce(.f=function(v, x) left_join(myMat %*% v), .x=1:50,
.init=c(10,10))
accumulate(.f=function(v, x) myMat %*% v, .x=1:50,
.init=c(10,10))
install.packages("popbio")
head(pops)
pops
# First define the number of years
# how many years into the future
times <- 50
# Second, make a collection bin
pops <-matrix(data = NA, nrow = times, ncol = 2)
# Third, make the first row of pops = c(10,10)
# the pops[1,] is read to be ROW 1 of pops
pops[1,] <- n0
n0 <- c(10,10)
myMat %*% n0
myMat <- matrix(c(0,2,0.5,0.1), nrow = 2, byrow = TRUE)
myMat
n0 <- c(10,10)
myMat %*% n0
# First define the number of years
# how many years into the future
times <- 50
# Second, make a collection bin
pops <-matrix(data = NA, nrow = times, ncol = 2)
# Third, make the first row of pops = c(10,10)
# the pops[1,] is read to be ROW 1 of pops
pops[1,] <- n0
for (i in 2:times){
pops[i,] <- myMat %*% pops[(i-1),]
head(pops)
}
popbio::pop.projection()
popbio::pop.projection
library(tidyverse)
library(popbio)
library(matrixcalc)
load('~/Google Drive/###Teaching Active/2017_18/APS 273/Workshops/COMADRE_v.2.0.1.RData')
length(comadre$mat) # 1927
load("/Users/apb/Google Drive/###Teaching Active/2017_18/APS 273/Workshops/studentMatrices.RData")
ls()
length(useStudent)
?pop.projection
stages<-c("seedling", "vegetative", "flowering")
A<-matrix(c(
0,     0,  5.905,
0.368, 0.639,  0.025,
0.001, 0.152,  0.051
), nrow=3, byrow=TRUE,
dimnames=list(stages,stages)
)
n<-c(5,5,5)
p<-pop.projection(A,n, 15)
p
p
ls()
map(.f = stuff, useStudent)
stuff <- function(mat){
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
print(out)
ggplot(pp, aes(x = 1:50, y = pop.sizes))+
geom_point()+
scale_y_log10()
}
map(.f = stuff, useStudent)
p
p$pop.sizes
map(.f = stuff, useStudent)
mat<-useStudent[[1]]
mat
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
print(out)
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes)
pd
ggplot(pd, aes(x = time, y = numbers))+
geom_point()+
scale_y_log10()
p
data.frame(time= 1:50, numbers = pp$pop.sizes, pp$stage.vectors)
data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
pp$stage.vectors
data.frame(t(pp$stage.vectors))
sv<-data.frame(t(pp$stage.vectors))
cbind(pp$pop.sizes, map(.x = sv, .f = sum))
cbind(pp$pop.sizes, apply(sv, 1, sum))
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
names(pd)[3:7] <- c("S1","S2","S3","S4","S5")
pd
ggplot(pd, aes(x = time, y = numbers))+
geom_line()+
geom_line(aes(x = time, y= S1))+
geom_line(aes(x = time, y= S2))+
geom_line(aes(x = time, y= S3))+
geom_line(aes(x = time, y= S4))+
geom_line(aes(x = time, y= S5))+
scale_y_log10()
map(.f = stuff, useStudent)
map(.f = stuff, .x = useStudent)
useStudent
map(.x = useStudent, .f = length())
map(.x = useStudent, .f = length
)
map(.f = stuff, .x = useStudent)
map(.f = stuff, .x = useStudent)
stuff <- function(mat){
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
names(pd)[3:7] <- c("S1","S2","S3","S4","S5")
print("-----")
cat('\n')
print(out)
ggplot(pd, aes(x = time, y = numbers))+
geom_line()+
geom_line(data = pd, aes(x = time, y= S1))+
geom_line(data = pd, aes(x = time, y= S2))+
geom_line(data = pd, aes(x = time, y= S3))+
geom_line(data = pd, aes(x = time, y= S4))+
geom_line(data = pd, aes(x = time, y= S5))+
scale_y_log10()
}
stuff <- function(mat){
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
names(pd)[3:7] <- c("S1","S2","S3","S4","S5")
print("-----")
cat('\n')
print(out)
ggplot(pd, aes(x = time, y = numbers))+
geom_line()+
geom_line(data = pd, aes(x = time, y= S1))+
geom_line(data = pd, aes(x = time, y= S2))+
geom_line(data = pd, aes(x = time, y= S3))+
geom_line(data = pd, aes(x = time, y= S4))+
geom_line(data = pd, aes(x = time, y= S5))+
scale_y_log10()
}
map(.f = stuff, .x = useStudent)
stuff(useStudent[[1]])
stuff <- function(mat){
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
names(pd)[3:7] <- c("S1","S2","S3","S4","S5")
print("-----")
cat('\n')
print(mat)
print("-----")
cat('\n')
print(out)
ggplot(pd, aes(x = time, y = numbers))+
geom_line()+
geom_line(data = pd, aes(x = time, y= S1))+
geom_line(data = pd, aes(x = time, y= S2))+
geom_line(data = pd, aes(x = time, y= S3))+
geom_line(data = pd, aes(x = time, y= S4))+
geom_line(data = pd, aes(x = time, y= S5))+
scale_y_log10()
}
stuff(useStudent[[1]])
stuff(useStudent[[6]])
stuff(useStudent[[12]])
stuff <- function(mat){
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
names(pd)[3:7] <- c("S1","S2","S3","S4","S5")
print("-----")
cat('\n')
print(mat)
print("-----")
cat('\n')
print(out)
ggplot(pd, aes(x = time, y = numbers))+
geom_line()+
geom_line(data = pd, aes(x = time, y= S1, col = 'red'))+
geom_line(data = pd, aes(x = time, y= S2))+
geom_line(data = pd, aes(x = time, y= S3))+
geom_line(data = pd, aes(x = time, y= S4))+
geom_line(data = pd, aes(x = time, y= S5))+
scale_y_log10()
}
stuff(useStudent[[1]])
stuff <- function(mat){
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
names(pd)[3:7] <- c("S1","S2","S3","S4","S5")
print("-----")
cat('\n')
print(mat)
print("-----")
cat('\n')
print(out)
ggplot(pd, aes(x = time, y = numbers))+
geom_line()+
geom_line(data = pd, aes(x = time, y= S1, col = 'red'))+
geom_line(data = pd, aes(x = time, y= S2, col = 'green'))+
geom_line(data = pd, aes(x = time, y= S3, col = 'blue'))+
geom_line(data = pd, aes(x = time, y= S4), col = 'purple')+
geom_line(data = pd, aes(x = time, y= S5), col = 'yellow')+
scale_y_log10()
}
stuff(useStudent[[1]])
stuff <- function(mat){
ll <- lambda(mat)
ss <- stable.stage(mat)
pp <- pop.projection(mat, rep(10,5), 50)
ee <- elasticity(mat)
sen <- sensitivity(mat)
out<-list(lambda = ll, stable_stage = ss,
elasticity = ee, sensitivity = sen)
pd<-data.frame(time= 1:50, numbers = pp$pop.sizes, t(pp$stage.vectors))
names(pd)[3:7] <- c("S1","S2","S3","S4","S5")
print("-----")
cat('\n')
print(mat)
print("-----")
cat('\n')
print(out)
ggplot(pd, aes(x = time, y = numbers))+
geom_line()+
geom_line(data = pd, aes(x = time, y= S1), col = 'red')+
geom_line(data = pd, aes(x = time, y= S2), col = 'green')+
geom_line(data = pd, aes(x = time, y= S3), col = 'blue')+
geom_line(data = pd, aes(x = time, y= S4), col = 'purple')+
geom_line(data = pd, aes(x = time, y= S5), col = 'yellow')+
scale_y_log10()
}
stuff(useStudent[[1]])
stuff(useStudent[[12]])
?sensitivity
data(teasel)
sens<-sensitivity(teasel)
## IMAGE plot with smaller boxes
image2(sens, mar=c(1,3.5,5,1), box.offset=.1)
title("Sensitivity matrix using image2", line=2.5)
image2(sensitivity(useStudent[[1]]))
teasel
sensitivity(useStudent[[12]])
elasticity(useStudent[[12]])
sensitivity(useStudent[[12]])
image2(sensitivity(useStudent[[12]]))
stuff(useStudent[[5]])
stuff(useStudent[[4]])
stuff(useStudent[[8]])
